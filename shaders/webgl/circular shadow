void sun_shadows(out float a,vec2 sun,vec2 planet,float thick,vec2 uv){
   
    vec2 d = uv - sun*iResolution.xy;
    vec2 f = sun*iResolution.xy - planet;
   float A = dot(d,d);
        //d.Dot( d ) ;
float b = dot(2.*f,d) ;
float c = dot(f,f) - thick*thick;

float discriminant = b*b-4.*A*c;
    if(discriminant >0.){
          discriminant = sqrt( discriminant );


  float t1 = (-b - discriminant)/(2.*A);
  float t2 = (-b + discriminant)/(2.*A);
        
    if( t1 >= 0. && t2 <= 1. )
  {
  a= 0.;
  }
    }

}
//////////
this code checks if there is a circle and the number of collisions, i control the light accordingly
the second method i use was to check collision between 'horizon line' and 'light direction'

////////
bool onSegment(vec2 p, vec2 q, vec2 r)
{
    if (q.x <= max(p.x, r.x) && q.x >= min(p.x, r.x) &&
        q.y <= max(p.y, r.y) && q.y >= min(p.y, r.y))
       return true;
 
    return false;
}
int orientation(vec2 p, vec2 q, vec2 r)
{
    float val = (q.y - p.y) * (r.x - q.x) -
              (q.x - p.x) * (r.y - q.y);
     if (val == 0.) return 0;  
    return (val > 0.)? 1: 2; 
}
bool doIntersect(vec2 p1, vec2 q1, vec2 p2, vec2 q2)
{
 
    int o1 = orientation(p1, q1, p2);
    int o2 = orientation(p1, q1, q2);
    int o3 = orientation(p2, q2, p1);
    int o4 = orientation(p2, q2, q1);
 
    if (o1 != o2 && o3 != o4)        return true;
    if (o1 == 0 && onSegment(p1, p2, q1)) return true;
   if (o2 == 0 && onSegment(p1, q2, q1)) return true;
   if (o3 == 0 && onSegment(p2, p1, q2)) return true;
    if (o4 == 0 && onSegment(p2, q1, q2)) return true;

    return false; 
}
void sun_shadows(out float a,vec2 sun,vec2 planet,float thick,vec2 uv){
    vec2 p1 =sun*iResolution.xy;
    float ang =atan((planet.y - p1.y)/(planet.x - p1.x));
    vec2 q1 = planet +  SC(-ang)*thick;
     vec2 q2 = planet - SC(-ang)*thick;
      if(doIntersect(p1,uv,q1,q2))a=0.;

   

}
//////// this is the code of segment intersection check, its not perfect and more costly but it was the solution i found.
